using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerMovement : MonoBehaviour
{
    private Rigidbody2D rb;
    private BoxCollider2D coll;
    private SpriteRenderer sprite;
    private Animator anim;

    [SerializeField] private LayerMask jumpableGround;

    private float dirX = 0f;
    [SerializeField] private float moveSpeed = 7f;
    [SerializeField] private float jumpForce = 14F;
    [SerializeField] private int maxJumpCount = 2;
    private bool isGrounded = false;
    [SerializeField] private int jumpCount = 0;
    private float defaultGravityScale;

    private enum MovementState { IDLE, SALTO, CAIDA, CORRIENDO }

    [SerializeField] private AudioSource jumpSoundEffect;

    // Start is called before the first frame update
    private void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        coll = GetComponent<BoxCollider2D>();
        sprite = GetComponent<SpriteRenderer>();
        anim = GetComponent<Animator>();

        // Almacena el valor original de gravityScale
        defaultGravityScale = rb.gravityScale;
    }



    private void Update()
    {
        dirX = Input.GetAxisRaw("Horizontal");
        rb.velocity = new Vector2(dirX * moveSpeed, rb.velocity.y);

        isGrounded = IsGrounded();

        // Restablece el contador de saltos si está en el suelo
        if (isGrounded)
        {
            jumpCount = 0;
        }

        if (Input.GetKeyDown(KeyCode.Space) && (isGrounded || jumpCount < maxJumpCount))
        {
            Jump();
        }

        UpdateAnimationState();
    }

    private void Jump()
    {
        // Restablece la velocidad vertical antes de aplicar el nuevo impulso
        rb.velocity = new Vector2(rb.velocity.x, 0f);

        // Aplica la fuerza de salto
        rb.AddForce(Vector2.up * jumpForce, ForceMode2D.Impulse);

        // Incrementa el contador de saltos
        jumpCount++;

        // Reproduce el sonido de salto
        jumpSoundEffect.Play();

        // Restablece el contador de saltos si está en el suelo
        if (isGrounded)
        {
            jumpCount = 0;
        }
    }




    private void UpdateAnimationState()
    {

        MovementState state;

        if (dirX > 0f)
        {
            state = MovementState.CORRIENDO;
            sprite.flipX = false;
        }
        else if (dirX < 0f)
        {
            state = MovementState.CORRIENDO;
            sprite.flipX = true;
        }
        else
        {
            state = MovementState.IDLE;
        }

        if (rb.velocity.y > .2f)
        {
            state = MovementState.SALTO;
        }
        else if (rb.velocity.y < -.2f)
        {
            state = MovementState.CAIDA;
        }

        anim.SetInteger("state", (int)state);

    }

    private bool IsGrounded()
    {
        float circleRadius = 1f;
        Collider2D[] colliders = Physics2D.OverlapCircleAll(transform.position, circleRadius, jumpableGround);

        if (colliders.Length > 0)
        {
            // Si hay al menos un collider en el círculo, se considera que está en el suelo
            jumpCount = 0;
            return true;
        }

        return false;
    }


}
